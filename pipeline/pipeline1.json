{
	"name": "pipeline1",
	"properties": {
		"activities": [
			{
				"name": "initial_load",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					}
				}
			},
			{
				"name": "IncrementTheInitialLoad",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "initial_load",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "increment_load_value",
					"value": {
						"value": "@concat(\n    if(equals(substring(activity('initial_load').output.firstRow.LastLoadedQuarter, 5, 2), 'Q4'),\n        string(add(int(substring(activity('initial_load').output.firstRow.LastLoadedQuarter, 0, 4)), 1)),\n        substring(activity('initial_load').output.firstRow.LastLoadedQuarter, 0,4)\n    ), '_Q',\n    if(equals(substring(activity('initial_load').output.firstRow.LastLoadedQuarter, 5, 2), 'Q4'),\n        '1',\n        string(add(int(substring(activity('initial_load').output.firstRow.LastLoadedQuarter, 6, 1)), 1))\n    )\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Check file exists",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "IncrementTheInitialLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "ParquetReadSettings"
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check file exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Check file exists').output.exists",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Copy_trans_from_git",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "HttpReadSettings",
										"requestMethod": "GET"
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false
							}
						},
						{
							"name": "Update_load",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy_trans_from_git",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[incr_load_pro]",
								"storedProcedureParameters": {
									"update_load": {
										"value": {
											"value": "@variables('increment_load_value')",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Email notification",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "POST",
								"headers": {
									"Content-Type": "application/json"
								},
								"url": "https://prod-31.centralindia.logic.azure.com:443/workflows/df25154ade1a4f2f82387157c51293fa/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=dCF3iOXM4Qe4Ok5cpHCe0py-D1CSvhaTraup5LYU01o",
								"body": {
									"value": "{\n  \"subject\": \"File Already Exists\",\n  \"body\": \"The file transactions_@{variables('increment_load_value')}.csv already exists in ADLS. No new copy was performed.\"\n}\n\n\n\n\n\n\n\n\n\n",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"variables": {
			"increment_load_value": {
				"type": "String"
			},
			"files_list": {
				"type": "String"
			},
			"gitfile_sha": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-02-19T04:14:41Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}